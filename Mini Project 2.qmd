---
title: "Mini Project 2"
author: "Ian Palmer"
date: 10/02/24
execute: 
  warning: false
  message: false
---

This analysis uses data from the [Netflix Titles Data Source](https://github.com/rfordatascience/tidytuesday/blob/master/data/2021/2021-04-20/readme.md), which is available through the TidyTuesday github repository.

```{r, message=FALSE, warning=FALSE}

library(tidyverse)

tuesdata <- tidytuesdayR::tt_load('2021-04-20')

netflix <- tuesdata$netflix

```

```{r}
netflix
```


```{r}
# Distribution of content type
netflix_type_count <- netflix |>
  count(type)

netflix_type_count

# Distribution of content release year
netflix_year_count <- netflix |>
  count(release_year) |>
  arrange(desc(n))
netflix_year_count
```

Here we can see data frames for the amount of movies and TV shows on Netflix from each release year and the amount of Movies and TV shows on Netflix. We can see that there are around double the amount of movies compared to TV shows. There seems to be a trend of more modern TV shows and movies on Netflix.

```{r}
# Plotting the distribution of content type
ggplot(netflix_type_count, aes(x = type, y = n, fill = type)) +
  geom_bar(stat = "identity") +
  labs(title = "Distribution of Movies vs TV Shows", x = "Type", y = "Count")

# Plotting the distribution of Release year
ggplot(netflix_year_count, aes(x = release_year, y = n)) +
  geom_line() +
  labs(title = "Netflix Content Release Year Distribution", x = "Release Year", y = "Count")
```

Visual represetations of the previous data frames. 

```{r}
# Count titles containing the word "love"
love_count <- netflix |>
  filter(str_detect(str_to_lower(title), "love")) |>
  summarise(count = n())

love_count
```
Used str functions str_detect() and str_to_lower() to look for a popular word. Used regular expression "love" to look for the word love in movie and TV titles.


```{r}
# Titles containing the words "life", "world", or "death"
keywords_titles <- netflix |>
  filter(str_detect(str_to_lower(title), "life|world|death"))

keywords_titles


```

Uses regular expression "life|world|death" to search for more possible popular words in move/tv show titles. Returns the entire data frame.

```{r}
# Count occurrences of each word "life", "world", and "death" in the titles
word_count <- netflix |>
  mutate(title_lower = str_to_lower(title)) |>
  
  summarise(
    life_count = sum(str_count(title_lower, "life")),
    world_count = sum(str_count(title_lower, "world")),
    death_count = sum(str_count(title_lower, "death"))
  )


word_count


```

Gives a count for each of the selected words.

```{r}


# Count the number of occurrences of each director, excluding missing values
popular_directors <- netflix |>
  filter(!is.na(director) & director != "") |>
  count(director) |>
  arrange(desc(n))

# View the top 10 most popular directors
head(popular_directors, 10)

# Separate the cast into individual actors and count their occurrences
popular_actors <- netflix |>
  filter(!is.na(cast) & cast != "") |>
  separate_rows(cast, sep = ", ") |>
  count(cast) |>
  arrange(desc(n))

# View the top 10 most popular actors
head(popular_actors, 10)

# Separate the country column into individual countries and count their occurrences
popular_countries <- netflix |>
  filter(!is.na(country) & country != "") |>
  separate_rows(country, sep = ", ") |>
  count(country) |>
  arrange(desc(n))

# View the top 10 most popular countries
head(popular_countries, 10)
```

This code performs three different tasks of counting occurrences of directors, actors, and countries, and then displaying the top 10 most popular in each category. It filters out missing or empty values and splits data where necessary (such as for actors and countries with multiple entries separated by commas).

It was very interesting to see the large amount of Indian actors appearing in tv shows/movies compared to the total amount of Indian movies. Perhaps there is a fewer supply of popular actors in Bollywood compared to Hollywood in the United States. 


```{r}


netflix_lowercase_titles <- netflix |>
  mutate(lower_title = str_to_lower(title))

#Use regular expressions to extract words and exclude those containing digits
netflix_words <- netflix_lowercase_titles |>
  separate_rows(lower_title, sep = "\\s+") |>
  filter(!str_detect(lower_title, "\\d"))

#Remove common words that are not of interest
common_words <- c("the", "and", "in", "of", "to", "a", "is", "for", "with", "on", "at", "by", "an", "from", "i", "&")

netflix_words_final <- netflix_words |>
  filter(!is.element(lower_title, common_words))

#Count the frequency of each word
popular_words <- netflix_words_final |>
  count(lower_title, sort = TRUE)

head(popular_words, 10)

```

```{r}
popular_words |>
  head(10) |>
  ggplot(aes(x = reorder(lower_title, n), y = n)) +
  geom_bar(stat = "identity", fill = "green") +
  coord_flip() +
  labs(title = "Top 10 Most Common Words in Netflix Titles",
       x = "Words",
       y = "Frequency")
```
This data frame and graph show the top 10 most common words used in Netflix titles. I  excluded common conjunction words such as "the", "and", or "of". I also used the regular expressions \\d and \\s+ to filter out digits and whitespace. My early prediction of "love", "life", "world" all being popular words in titles turned out to be true. However, "death" did not make the top 10.